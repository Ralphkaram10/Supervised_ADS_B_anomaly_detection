#!/usr/bin/env python
# coding: utf-8
"""
"SBS_to_Meta.py" is a python script used to convert a dataset of SBS files (each SBS
file is associated with one callsign) to a dataset of files (containing meta
messages) ready to train or evaluate models generated by "detector.py".


NEEDED PACKAGES

    pandas,
    tqdm,
    These packages could be installed using pip or conda.

USAGE

    usage: SBS_to_Meta.py [-h] --dataset_path DATASET_PATH

    optional arguments:
      -h, --help            show this help message and exit
      --dataset_path DATASET_PATH
			    Specify the relative path of the SBS dataset
"""

import pandas as pd
import numpy as np
from numpy.random import seed
import random
import os
from tqdm import tqdm
from matplotlib import pyplot as plt
from pathlib import Path
import datetime
import argparse



def associate_attack_with_one(x):
    if x!=0:
        return 1
    else:
        return x
    
def combine_7_8(df):
    if 7 in df.columns and 8 in df.columns:
        df['7_8']=df.apply(lambda x:datetime.datetime.timestamp(datetime.datetime.strptime(x[7]+' '+x[8], '%Y/%m/%d %H:%M:%S.%f')),axis=1)
        df=df.drop(columns=[7,8])       
    return df
    

def create_relative_time(df):
    if 7 in df.columns and 8 in df.columns:
        df=combine_7_8(df)
        df=df.reset_index(drop=True)
        initial_timestamp=df.loc[:,['7_8']].iloc[0]
        df['7_8']=df['7_8'].apply(lambda x:x-initial_timestamp)
    return df  
    
if __name__=='__main__':
    seed(0)


    parser = argparse.ArgumentParser(description="The current python script is used to convert a dataset of SBS files (each SBS file is associated with one callsign) to a dataset of files (containing meta messages) ready to train or evaluate models generated by \"detector.py\".") 
    parser.add_argument("--dataset_path", help="Specify the relative path of the SBS dataset",required=True,type=str)
    args = parser.parse_args()


    input_directory_path=args.dataset_path
    output_directory_path=input_directory_path+"_Meta"
    sbs_files_paths_list=[str(i) for i in list(Path(input_directory_path).glob("**/*.sbs"))]


    for sbs_file_path in tqdm(sbs_files_paths_list):

        name_flight,ext=os.path.splitext(os.path.basename(sbs_file_path))
        print(name_flight)
        df = pd.read_csv(sbs_file_path,sep=',',header=None) 
        
        df=df.rename(columns={0:1,1:2,2:3,3:4,4:5,5:6,6:7,7:8,8:9,9:10,10:11,11:12,12:13,13:14,14:15,15:16,16:17,17:18,18:19,19:20,20:21,21:22,22:23,23:24})
        
        df=create_relative_time(df)

        if (23 not in df.columns) or (24 not in df.columns):
            df[23]=0;
            df[24]=0;
        
        #associate attack with one so that the column 24 is considered as the label column
        df[24]=df[24].apply(associate_attack_with_one)
        df[23]=df[23].apply(associate_attack_with_one)
        df[24]=df[24].astype(bool) | df[23].astype(bool)   
        df[24]=df[24].astype(int)
        
        df=df.fillna(method='pad')
        df=df.drop_duplicates(subset=[4,12,13,14,15,16,17],keep=False).reset_index(drop=True)   
        df=df.fillna(method='pad')

        #insert dummy time
        df[0]=np.arange(df.shape[0])
        
        
        cols_to_keep=[0,'7_8',4,12,13,14,15,16,17,24]#[0,4,12,13,14,15,16,17,24]
        df=df[cols_to_keep]
        df=df.dropna()
        
        
        meta_name=name_flight+"_Meta"
        if not os.path.exists(output_directory_path):
            os.mkdir(output_directory_path)

        fullname =output_directory_path+"/"+meta_name   
        df.to_csv(fullname+'.csv',index=False)#keep header 
        print(df.shape)

    print(df.head(5))





